import Head from "next/head";
import SmallCard from "@/components/molecules/SmallCard";
import { useEffect, useState } from "react";
import { getBusinessCards } from "@/services/firebase-service";
import PrettySpinner from "@/components/atoms/PrettySpinner";

export default function Home() {
  const [cards, setCards] = useState([]);
  const [isLoading, setIsLoading] = useState(false);

  /*
  // This is just for demonstration purposes
  useEffect(() => {
    // Callback function
    getBusinessCards()
      .then((response) => {
        return response.json();
      })
      .then((body) => {
        console.log(body);
      });
  }, []); // The dependency array
  */

  useEffect(() => {
    async function fetchData() {
      setIsLoading(true);

      setTimeout(async () => {
        const response = await getBusinessCards();

        if (response.ok) {
          const body = await response.json();
          const objects = Object.values(body);
          setCards(objects);
        } else {
          const statusCode = response.statusCode;
          if (500 <= statusCode) {
            alert("Server error");
          } else if (400 <= statusCode && statusCode < 500) {
            alert("you fucked up");
          }
        }
        setIsLoading(false);
      }, 2500);
    }

    fetchData();
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <h1>Start my business card project here.</h1>
        {/* isLoading && <PrettySpinner /> */}
        {isLoading ? (
          <PrettySpinner />
        ) : (
          cards.map((card) => {
            return (
              <SmallCard
                name={card.name}
                job={card.job}
                website={card.website}
              />
            );
          })
        )}
      </main>
    </>
  );
}
